{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["people","id","name","thumb","App","useState","characters","updateCharacters","correctAnswers","className","onDragEnd","result","destination","items","Array","from","splice","source","index","reorderedItem","console","log","droppableId","provided","droppableProps","ref","innerRef","map","key","draggableId","draggableProps","dragHandleProps","src","alt","placeholder","onClick","li","document","querySelectorAll","answers","forEach","text","push","innerHTML","JSON","stringify","alert","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"sNAIMA,G,MAAS,CACb,CACEC,GAAI,OACJC,KAAM,OACNC,MAAO,6BAET,CACEF,GAAI,QACJC,KAAM,QACNC,MAAO,8BAET,CACEF,GAAI,WACJC,KAAM,WACNC,MAAO,mCA0EIC,MArEf,WACE,MAAuCC,mBAASL,GAAhD,mBAAOM,EAAP,KAAmBC,EAAnB,KAWMC,EAAiB,CACrB,wDACA,kDACA,iDAmBF,OACE,yBAAKC,UAAU,OACb,4BAAQA,UAAU,cAChB,oDACA,kBAAC,IAAD,CAAiBC,UAnCvB,SAAyBC,GACvB,GAAKA,EAAOC,YAAZ,CACA,IAAMC,EAAQC,MAAMC,KAAKT,GACzB,EAAwBO,EAAMG,OAAOL,EAAOM,OAAOC,MAAO,GAAnDC,EAAP,oBACAN,EAAMG,OAAOL,EAAOC,YAAYM,MAAO,EAAGC,GAC1CZ,EAAiBM,GACjBO,QAAQC,IAAIR,MA8BN,kBAAC,IAAD,CAAWS,YAAY,eACpB,SAACC,GAAD,OACC,sCAAItB,GAAG,IAAIQ,UAAU,cAAiBc,EAASC,eAA/C,CAA+DC,IAAKF,EAASG,WAC1EpB,EAAWqB,KAAI,WAAsBT,GAAW,IAA9BjB,EAA6B,EAA7BA,GAAIC,EAAyB,EAAzBA,KAAMC,EAAmB,EAAnBA,MAC3B,OACE,kBAAC,IAAD,CAAWyB,IAAK3B,EAAI4B,YAAa5B,EAAIiB,MAAOA,IACzC,SAACK,GAAD,OACC,sCAAItB,GAAG,OAAOwB,IAAKF,EAASG,UAAcH,EAASO,eAAoBP,EAASQ,iBAC9E,yBAAKtB,UAAU,oBACb,yBAAKuB,IAAK7B,EAAO8B,IAAG,UAAK/B,EAAL,aAEtB,2BACGA,UAOZqB,EAASW,iBAKlB,4BAAQzB,UAAU,MAAK0B,QA7C7B,WACE,IAAMC,EAAKC,SAASC,iBAAiB,qBACjCC,EAAU,IAAIzB,MAClBsB,EAAGI,SAAQ,SAAUC,GACnBF,EAAQG,KAAKD,EAAKE,cAEhBC,KAAKC,UAAUrC,KAAoBoC,KAAKC,UAAUN,GACpDO,MAAM,mBAENA,MAAM,8BAER1B,QAAQC,IAAIkB,GACZnB,QAAQC,IAAIb,KAiCR,gBC1EYuC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFjB,SAASkB,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACL3C,QAAQ2C,MAAMA,EAAMC,a","file":"static/js/main.903e2491.chunk.js","sourcesContent":["import React, { useState } from 'react';\nimport { DragDropContext, Droppable, Draggable } from 'react-beautiful-dnd';\nimport './App.css';\n\nconst people = [\n  {\n    id: 'tomi',\n    name: 'Tomi',\n    thumb: '../public/images/tomi.png'\n  },\n  {\n    id: 'renan',\n    name: 'Renan',\n    thumb: '../public/images/renan.png'\n  },\n  {\n    id: 'michelly',\n    name: 'Michelly',\n    thumb: '../public/images/michelly.png'\n  },\n\n]\n\nfunction App() {\n  const [characters, updateCharacters] = useState(people);\n\n  function handleOnDragEnd(result) {\n    if (!result.destination) return;\n    const items = Array.from(characters);\n    const [reorderedItem] = items.splice(result.source.index, 1);\n    items.splice(result.destination.index, 0, reorderedItem);\n    updateCharacters(items);\n    console.log(items)\n  }\n\n  const correctAnswers = [\n    '<img src=\"/images/michelly.png\" alt=\"Michelly Thumb\">',\n    '<img src=\"/images/renan.png\" alt=\"Renan Thumb\">',\n    '<img src=\"/images/tomi.png\" alt=\"Tomi Thumb\">',\n  ];\n\n  function checkAnswer() {\n    const li = document.querySelectorAll(\".characters-thumb\");\n    let answers = new Array();\n    li.forEach(function (text) {\n      answers.push(text.innerHTML);\n    });\n    if (JSON.stringify(correctAnswers) === JSON.stringify(answers)) {\n      alert(\"Acertou!!!!!!!!\");\n    } else {\n      alert(\"Errrrrooooouuuuuu!!!!!!!!!\");\n    }\n    console.log(answers)\n    console.log(correctAnswers)\n  }\n\n\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <h1>teste de drag & drop</h1>\n        <DragDropContext onDragEnd={handleOnDragEnd}>\n          <Droppable droppableId=\"characters\">\n            {(provided) => (\n              <ul id=\"w\" className=\"characters\" {...provided.droppableProps} ref={provided.innerRef}>\n                {characters.map(({ id, name, thumb }, index) => {\n                  return (\n                    <Draggable key={id} draggableId={id} index={index}>\n                      {(provided) => (\n                        <li id=\"char\" ref={provided.innerRef} {...provided.draggableProps} {...provided.dragHandleProps}>\n                          <div className=\"characters-thumb\">\n                            <img src={thumb} alt={`${name} Thumb`} />\n                          </div>\n                          <p>\n                            {name}\n                          </p>\n                        </li>\n                      )}\n                    </Draggable>\n                  );\n                })}\n                {provided.placeholder}\n              </ul>\n            )}\n          </Droppable>\n        </DragDropContext>\n        <button className=\"but\"onClick={checkAnswer}>Finalizar</button>\n      </header>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}